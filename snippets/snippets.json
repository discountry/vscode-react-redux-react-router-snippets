{
  // import
  "ES6 React Import": {
    "prefix": "imr",
    "body": "import React from 'react'\n"
  },
  "ES6 React & Component Import": {
    "prefix": "imrc",
    "body": "import React, { Component } from 'react'\n"
  },
  "ES6 React-DOM Import": {
    "prefix": "imd",
    "body": "import { render } from 'react-dom'\n"
  },
  "ES6 PropTypes Import": {
    "prefix": "impt",
    "body": "import PropTypes from 'prop-types'\n"
  },
  "ES6 Component Import": {
    "prefix": "imc",
    "body": "import ${1:componentName} from './components/${1:componentName}'\n"
  },
  // React
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": "import React, { Component } from 'react'\n\nexport default class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
    "description": "Creates a React component class with ES6 module system"
  },

  "reactJustClassCompoment": {
    "prefix": "rcjc",
    "body": "class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
    "description": "Creates a React component class with ES6 module system"
  },

  "reactClassCompomentPropTypes": {
    "prefix": "rccp",
    "body": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ${1:componentName} extends Component {\n\tstatic propTypes = {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
    "description": "Creates a React component class with PropTypes and ES6 module system"
  },

  "reactClassCompomentWithMethods": {
    "prefix": "rcfc",
    "body": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass ${1:componentName} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount() {\n\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount() {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1:componentName}.propTypes = {\n\n}\n\nexport default ${1:componentName}",
    "description": "Creates a React component class with PropTypes and all lifecycle methods and ES6 module system"
  },

  "reactStateless": {
    "prefix": "rsc",
    "body": "import React from 'react'\n\nfunction ${1:componentName}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:componentName}\n",
    "description": "Creates a stateless React component without PropTypes and ES6 module system"
  },
  "reactStatelessProps": {
    "prefix": "rscp",
    "body": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst propTypes = {\n\t$0\n}\n\nfunction ${1:componentName}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t)\n}\n\n${1:componentName}.propTypes = propTypes\n\nexport default ${1:componentName}\n",
    "description": "Creates a stateless React component with PropTypes and ES6 module system"
  },

  "classConstructor": {
    "prefix": "con",
    "body": "constructor(props) {\n\tsuper(props)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "classConstructorContext": {
    "prefix": "conc",
    "body": "constructor(props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props and context as arguments"
  },

  "emptyState": {
    "prefix": "est",
    "body": "this.state = {\n\t$1\n}",
    "description": "Creates empty state object. To be used in a constructor."
  },

  "emptyStateWithES7": {
    "prefix": "st",
    "body": "state = {\n\t$1\n}\n",
    "description": "Creates empty state object with ES7 synTax."
  },

  "componentWillMount": {
    "prefix": "cwm",
    "body": "\ncomponentWillMount() {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },

  "componentDidMount": {
    "prefix": "cdm",
    "body": "\ncomponentDidMount() {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },

  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "\ncomponentWillReceiveProps(nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },

  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "\nshouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received. "
  },

  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "\ncomponentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received."
  },

  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "\ncomponentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },

  "componentWillUnmount": {
    "prefix": "cwun",
    "body": "\ncomponentWillUnmount() {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },

  "componentDidCatch": {
    "prefix": "cdc",
    "body": "\ncomponentDidCatch(error, info) {\n\t$0\n}\n",
    "description": "Error boundaries are React components that catch JavaScript errors anywhere in their child component tree."
  },

  "componentRender": {
    "prefix": "ren",
    "body": "\nrender() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },

  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0)\n",
    "description": "Performs a shallow merge of nextState into current state"
  },

  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((prevState, props) => ({ $0 })\n",
    "description": "Performs a shallow merge of nextState into current state"
  },

  "componentProps": {
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },

  "componentState": {
    "prefix": "state",
    "body": "this.state.$0",
    "description": "Access component's state"
  },

  "bindThis": {
    "prefix": "bnd",
    "body": "this.$1 = this.$1.bind(this)$0\n",
    "description": "Binds the this of a method. To be used inside a constructor"
  },

  "propTypes": {
    "prefix": "rpt",
    "body": "$1.propTypes = {\n\t$2\n}",
    "description": "Creates empty propTypes declaration"
  },

  "static propTypes": {
    "prefix": "spt",
    "body": "static propTypes = {\n\t$0\n}\n",
    "description": "Creates empty propTypes declaration with ES7 class static properties"
  },

  "static defaultProps": {
    "prefix": "sdp",
    "body": "static defaultProps = {\n\t$0\n}\n",
    "description": "Creates empty defaultProps declaration with ES7 class static properties"
  },

  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  // Redux
  "Import reselect": {
    "prefix": "imcreateSelector",
    "body": "import { createSelector } from 'reselect'\n",
    "description": "import createSelector"
  },
  "Redux constant": {
    "prefix": "rat",
    "body": "export const $1 = '$1'",
    "description": "Redux action types."
  },
  "Redux actionCreator": {
    "prefix": "rac",
    "body": [
      "export const ${actionCreator} = (${payload}) => ({",
      "\ttype: ${actionType},",
      "\t${payload}",
      "})"
    ]
  },
  "Redux Reducer": {
    "prefix": "reducer",
    "body": [
      "export const ${1:reducerName} = (state = $2, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase '${3:ACTION_TYPE}':",
      "\t\t\treturn $4$0",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t}",
      "}"
    ],
    "description": "Redux reducer."
  },
  "Redux Store": {
    "prefix": "store",
    "body": [
      "import { ${1:reducerName} } from './reducer'",
      "import { createStore } from 'redux'",
      "",
      "const store = createStore(${1:reducerName})",
      "",
      "export default store"
    ],
    "description": "Redux store."
  },
  "Redux Selector": {
    "prefix": "selector",
    "body": [
      "export const ${1:selectorName} = createSelector(",
      "\t[${2:filter1}, ${3:filter2}]",
      "\t(filter1, filter2) => {",
      "\t\t",
      "\t}",
      ")",
      ""
    ],
    "description": "Redux selector."
  },
  // react-redux
  "Connect Redux": {
    "prefix": "imconnect",
    "body": "import { connect } from 'react-redux'\n"
  },
  "Provider Redux": {
    "prefix": "improvider",
    "body": "import { Provider } from 'react-redux'\n"
  },
  "mapStateToProps": {
    "prefix": "mstp",
    "body": [
      "const mapStateToProps = (state, ownProps) => ({",
      "\t$0",
      "})\n"
    ],
    "description": "react-redux connect mapStateToProps const function."
  },
  "mapDispatchToProps": {
    "prefix": "mdtp",
    "body": [
      "const mapDispatchToProps = {",
      "\t$0",
      "}\n"
    ],
    "description": "react-redux connect mapDispatchToProps const function."
  },
  "connect": {
    "prefix": "connect",
    "body": [
      "export default connect(mapStateToProps, mapDispatchToProps)(${containerName})"
    ],
    "description": "react-redux connect method."
  },
  "provider": {
    "prefix": "provider",
    "body": [
      "<Provider store={store}>",
      "\t${Component}$0",
      "</Provider>"
    ],
    "description": "react-redux Provider Container."
  },
  "container": {
    "prefix": "container",
    "body": [
      "import { connect } from 'react-redux'",
      "import ${component} from '../components/${component}'",
      "import { ${actionCreator} } from '../${actionPath}'",
      "",
      "const mapStateToProps = (state, ownProps) => ({",
      "\t$0",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t$0",
      "}\n",
      "export default connect(mapStateToProps, mapDispatchToProps)(${component})",
      ""
    ],
    "description": "Redux container"
  },
  // react-router
  "ES6 react-router Import": {
    "prefix": "imrr",
    "body": [
      "import {",
      "\tBrowserRouter as Router,",
      "\tRoute",
      "} from 'react-router-dom'\n"
    ]
  },
  "ES6 react-router NavLink Import": {
    "prefix": "imnl",
    "body": "import { NavLink } from 'react-router-dom'\n"
  },
  "ES6 react-router withRouter Import": {
    "prefix": "imwr",
    "body": "import { withRouter } from 'react-router-dom'"
  },
  "react-router Router": {
    "prefix": "router",
    "body": [
      "<Router>",
      "\t${0}",
      "</Router>"
    ]
  },
  "react-router Route": {
    "prefix": "route",
    "body": "<Route path='${1:path}' component={${2:component}}/>\n"
  },
  "react-router NavLink": {
    "prefix": "navlink",
    "body": "<NavLink to={${1:path}}>{$anchorText}</NavLink>\n"
  },
  // comment block
  "Comment Block": {
    "prefix": "cmmb",
    "body": [
      "/**",
      "|--------------------------------------------------",
      "| $1",
      "|--------------------------------------------------",
      "*/",
      ""
    ]
  }
}
